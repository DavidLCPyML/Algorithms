#include <bits/stdc++.h>
using namespace std;
 
#define vi vector<int>
#define pii pair<int, int>
#define vpii vector<pii>
#define fastio ios::sync_with_stdio(false);cin.tie(0); 
#define mp make_pair
 
ifstream fin("input.txt");
ofstream fout("output.txt");
const int MOD = 1e9 + 7;

template<typename T, typename T2>
void printPairVec(vector<pair<T, T2>> n) {
   for (int i = 0; i < n.size(); i++) {
       cout << n[i].first << " " << n[i].second << endl;
   }
}
template<typename T>
void printNestVec(vector<vector<T>> n) {
   for (int i = 0; i < n.size(); i++) {
       printStruct(n[i]);
   }
}
template<class C>
void printStruct(C &n) {
   for (auto i: n) {
       cout << i << " ";
   } cout << endl;
}

//uses aho-corasick suffix automata algorithm
const long long md = 1000000007;
long long trie[1000005][26];
bool stop[1000005];
long long dp[5005];
long long ct = 0;

void insert(string s) {
    long long node = 0;
    for (long long i = 0; i < s.size(); i++) {
        if (!trie[node][s[i]-'a']) trie[node][s[i]-'a'] = ++ct;
        node = trie[node][s[i]-'a'];
    }
    stop[node] = 1;
}

string s;
long long search(long long x) {
    long long node = 0, ans = 0;
    for (long long i = x; i < s.size(); i++) {
        if (!trie[node][s[i]-'a']) return ans;
        node = trie[node][s[i] - 'a'];
        if (stop[node]) {
            (ans += dp[i+1])%=md;
        }
    }
    return ans;
}

void solve(){
    cin>>s;
    long long k; cin>>k;
    while(k--) {
        string x; cin>>x;
        insert(x);
    }
    dp[s.size()] = 1;
    for (long long i = s.size() - 1; i>=0; i--) {        
        dp[i] = search(i);
    }
    cout<<dp[0];
} 

signed main(){
    fastio
    long long t=1;
    //cin>>t;
    for (long long i = 1; i <= t; i++) {
        solve();
        cout<<'\n';
    }
}

/*
avoid endl unless absolutely necessary!
*/