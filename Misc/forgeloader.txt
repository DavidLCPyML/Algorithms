#include <bits/stdc++.h>
using namespace std;
 
#define vi vector<int>
#define vd vector<double>
#define pii pair<int, int>
#define pdd pair<double, double>
#define vpdd vector<pdd>
#define vpii vector<pii>
#define ll long long
#define vl vector<ll>
#define fastio ios::sync_with_stdio(false);cin.tie(0); 
#define mp make_pair
#define customSort(v, sortbyCond) sort(v.begin(), v.end(), sortbyCond)
#define contSort(vec) sort(vec.begin(), vec.end())
#define arrsort(n, len) sort(n, n + len)
 
// ifstream fin("input.txt");
// ofstream fout("output.txt");
const int MOD = 1e9 + 7;
 
template<typename T, typename T2>
void printPairVec(vector<pair<T, T2>> n) {
   for (int i = 0; i < n.size(); i++) {
       cout << n[i].first << " " << n[i].second << endl;
   }
}
template<typename T>
void printNestVec(vector<vector<T>> n) {
   for (int i = 0; i < n.size(); i++) {
       printStruct(n[i]);
   }
}
template<class C>
void printStruct(C &n) {
   for (auto i: n) {
       cout << i << " ";
   } cout << endl;
}

// signed main() {
//     fastio
    
//     int n, m;
//     cin >> n >> m;

//     vi nums(n);


//     return 0;
// }

ifstream fin ("C:/Users/David/Downloads/e6 item tags.txt");
ofstream fout ("test.txt");

bool notAlph(char c) {
    switch(c) {
        case '"':
        case '/':
        case ':': 
            return true;
    }
    return false;
}

int main() {
    unordered_map<string, int> ingots;
    unordered_map<string, int> nuggets;
    unordered_map<string, int> blocks;

    string s;
    while(getline(fin, s)) {
        if(s != "") {
            // fout << s << endl;

            if (s.find("forge:ingots") != std::string::npos) {
                //strip forge:ingots
                // int pos = s.find("forge:ingots");
                // s.erase(pos, 12);

                //split string into two
                string s1, s2;
                stringstream iss(s);
                iss >> s1;
                iss >> s2;

                // erase non-key chars
                // s1.erase(remove_if(s1.begin(), s1.end(), &notAlph), s1.end());
                //debug the output mappings
                // fout << s1 << "," << stoi(s2) << endl;

                ingots[s1] = stoi(s2);
            } else if (s.find("forge:gems") != std::string::npos) {
                //strip forge:ingots
                // int pos = s.find("forge:gems");
                // s.erase(pos, strlen("forge:gems"));

                //split string into two
                string s1, s2;
                stringstream iss(s);
                iss >> s1;
                iss >> s2;

                int pos = s1.find("forge:gems");
                s1.erase(pos, strlen("forge:gems"));
                s1.insert(1, "forge:ingots");

                // erase non-key chars
                // s1.erase(remove_if(s1.begin(), s1.end(), &notAlph), s1.end());
                //debug the output mappings
                // fout << s1 << ": " << stoi(s2) << endl;

                ingots[s1] = stoi(s2);
            } else if (s.find("forge:storage_blocks") != std::string::npos) {
                // fout << s << endl;

                //split string into two, and check if it already has a value.
                string s1, s2;
                stringstream iss(s);
                iss >> s1;
                int val = (iss >> s2) ? stoi(s2) : -1;

                int pos = s1.find("forge:storage_blocks");
                s1.erase(pos, strlen("forge:storage_blocks"));
                s1.insert(1, "forge:ingots");
                // erase non-key chars
                // s1.erase(remove_if(s1.begin(), s1.end(), &notAlph), s1.end());
                // fout << s1 << ": " << val << endl;


                //search for key in ingot table
                if(ingots.find(s1) == ingots.end() && val == -1) {
                    fout << "could not find instance of " << s1 << " in table: create one first.\n";
                } else if (val == -1) {
                    string x = s1;
                    x.erase(x.find("forge:ingots"), strlen("forge:ingots"));
                    x.insert(1, "forge:storage_blocks");
                    fout << x << " " << ingots[s1] * 9 << endl;
                } else {
                    string x = s1;
                    x.erase(x.find("forge:ingots"), strlen("forge:ingots"));
                    x.insert(1, "forge:storage_blocks");
                    fout << x << " " << val << endl;
                }
            }

        }
    }

    for(auto it : ingots) {
        string x = it.first;
        x.erase(x.find("forge:ingots"), strlen("forge:ingots"));
        x.insert(1, "forge:nuggets");
        fout << x << " " << it.second / 9 << endl;
    }
    
    return 0;
}



/*
avoid endl unless absolutely necessary!
*/